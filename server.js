const express = require("express");
const cors = require("cors");
const dotenv = require("dotenv");
const fetch = require("node-fetch");
const OpenAI = require("openai");

dotenv.config();

if (!process.env.OPENAI_API_KEY) {
  console.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env");
  process.exit(1);
}

const app = express();
app.use(cors());
app.use(express.json());

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// üìÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function todayMinus(n) {
  const d = new Date();
  d.setDate(d.getDate() - n);
  return `${d.getDate().toString().padStart(2, '0')}.${(d.getMonth() + 1).toString().padStart(2, '0')}.${d.getFullYear()}`;
}

// üéµ –ü–ª–µ–π–ª–∏—Å—Ç
let playlist = [];

async function loadPlaylist() {
  try {
    const res = await fetch("https://docs.google.com/spreadsheets/d/e/2PACX-1vSiFzBycNTlvBeOqX0m0ZpACSeb1MrFSvEv2D3Xhsd0Dqyf_i1hA1_3zInYcV2bGUT2qX6GJdiZXZoK/pub?gid=0&single=true&output=csv");
    const text = await res.text();
    const rows = text.trim().split("\n").map(r => r.split(","));

    const headers = rows[0].map(h => h.trim().toLowerCase());
    const dateIdx = headers.findIndex(h => h.includes("date"));
    const timeIdx = headers.findIndex(h => h.includes("timestamp"));
    const songIdx = headers.findIndex(h => h.includes("song"));

    playlist = rows.slice(1).map(row => ({
      date: row[dateIdx]?.trim(),
      time: row[timeIdx]?.trim().slice(0, 5), // "1:54:06" ‚Üí "1:54"
      song: row[songIdx]?.trim()
    })).filter(r => r.date && r.time && r.song);

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${playlist.length}`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞:", err);
  }
}

loadPlaylist();
setInterval(loadPlaylist, 60 * 60 * 1000); // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å

function findSongsByDateTime(date, startTime, endTime) {
  const toMinutes = t => {
    const [h, m] = t.split(":").map(Number);
    return h * 60 + (m || 0);
  };

  const start = toMinutes(startTime);
  const end = toMinutes(endTime);

  return playlist.filter(entry => {
    if (entry.date !== date) return false;
    const time = toMinutes(entry.time);
    return time >= start && time <= end;
  });
}

async function parseDateTimeWithGPT(userMessage) {
  const now = new Date();
  const today = `${now.getDate().toString().padStart(2, '0')}.${(now.getMonth() + 1).toString().padStart(2, '0')}.${now.getFullYear()}`;

  const messages = [
    {
      role: "system",
      content: `–°–µ–≥–æ–¥–Ω—è ${today}.

–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ RuWave. –û–ø—Ä–µ–¥–µ–ª–∏ –¥–∞—Ç—É –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{"date":"–¥–¥.–º–º.–≥–≥–≥–≥", "start":"—á—á:–º–º", "end":"—á—á:–º–º"}

üîπ –ü—Ä–∞–≤–∏–ª–∞:
- –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "–≤—á–µ—Ä–∞", –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞—Ç—É: ${todayMinus(1)}
- –ï—Å–ª–∏ "–ø–æ–∑–∞–≤—á–µ—Ä–∞" ‚Äî ${todayMinus(2)}
- –ï—Å–ª–∏ "10 –¥–Ω–µ–π –Ω–∞–∑–∞–¥" ‚Äî ${todayMinus(10)}
- –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë
- –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é (${today})
- –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî —Å 00:00 –¥–æ 23:59
- "–≤ 7 –≤–µ—á–µ—Ä–∞" = —Å 19:00 –¥–æ 19:59, "–≤ 9 —É—Ç—Ä–∞" = —Å 09:00 –¥–æ 09:59
- –û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON ‚Äî –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.`
    },
    { role: "user", content: userMessage }
  ];

  const completion = await openai.chat.completions.create({
    model: "gpt-4o",
    messages,
    max_tokens: 300,
    temperature: 0.2
  });

  const reply = completion.choices[0].message.content;
  try {
    const json = JSON.parse(reply);
    return json;
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç GPT:", reply);
    return null;
  }
}

app.post("/chat", async (req, res) => {
  try {
    const userMessage = req.body.message?.trim();
    if (!userMessage) return res.status(400).json({ error: "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è" });

    const playlistQuery = /—á—Ç–æ –∏–≥—Ä–∞–ª–æ|–∫–∞–∫–∞—è –ø–µ—Å–Ω—è|—á—Ç–æ –∑–∞ –ø–µ—Å–Ω—è|—á—Ç–æ –±—ã–ª–æ/i.test(userMessage);
    if (playlistQuery) {
      const dateTime = await parseDateTimeWithGPT(userMessage);

      if (dateTime?.date && dateTime?.start && dateTime?.end) {
        const { date, start, end } = dateTime;
        const results = findSongsByDateTime(date, start, end);

        if (results.length > 0) {
          const list = results.map(r => r.song).join("\n");
          return res.json({ reply: `üéß –ü–µ—Å–Ω–∏ –∑–∞ ${date} —Å ${start} –¥–æ ${end}:\n${list}` });
        } else {
          return res.json({ reply: `üéß –ó–∞ ${date} —Å ${start} –¥–æ ${end} –ø–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.` });
        }
      } else {
        return res.json({ reply: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞." });
      }
    }

    // OpenAI ‚Äî –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    const messages = [
      {
        role: "system",
        content: `–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç RuWave 94FM. –ü–æ–º–æ–≥–∞–µ—à—å —Å —ç—Ñ–∏—Ä–æ–º, –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏, —Ä–µ–∫–ª–∞–º–æ–π, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –ø–ª–µ–π–ª–∏—Å—Ç–æ–º.`
      },
      {
        role: "user",
        content: userMessage
      }
    ];

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages,
      max_tokens: 500,
      temperature: 0.7
    });

    const reply = completion.choices?.[0]?.message?.content || "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏.";
    res.json({ reply });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /chat:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", detail: err.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ RuWave —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
