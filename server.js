app.post("/chat", async (req, res) => {
  const userMessage = req.body.message?.trim();
  if (!userMessage) {
    return res.status(400).json({ error: "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
  for (let key in prices) {
    if (userMessage.toLowerCase().includes(key)) {
      const reply = `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ "${key}": ${prices[key]}`;
      return res.json({ reply });
    }
  }

  // ‚úÖ –ù–æ–≤—ã–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞ –≤–∏–¥–∞ "—á—Ç–æ –∏–≥—Ä–∞–ª–æ –≤ [–≤—Ä–µ–º—è] [–¥–∞—Ç–∞]"
  const regex = /(?:–≤\s*)?(\d{1,2}[:.]\d{2})\s*(?:–≤\s*)?(\d{1,2}[./-]\d{1,2}[./-]\d{2,4})?/i;
  const match = userMessage.match(regex);

  if (match) {
    const inputTime = match[1].replace(".", ":");
    const [h, m] = inputTime.split(":");
    const time = `${parseInt(h)}:${m}`; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç 09:00 ‚Üí 9:00

    const date = match[2]
      ? dayjs(match[2], ["DD.MM.YYYY", "DD/MM/YYYY", "DD-MM-YYYY"]).format("DD.MM.YYYY")
      : dayjs().format("DD.MM.YYYY");

    try {
      const songs = await fetchSongs();
      const song = songs.find((row) => {
        const songDate = row["–î–∞—Ç–∞"]?.trim();
        const songTime = row["–í—Ä–µ–º—è"]?.trim();
        return songDate === date && songTime === time;
      });

      if (song) {
        return res.json({
          reply: `üé∂ –í ${time} (${date}) –∏–≥—Ä–∞–ª–∞ –ø–µ—Å–Ω—è: ${song["–ü–µ—Å–Ω—è"]}`
        });
      } else {
        return res.json({
          reply: `ü§∑ –ù–µ –Ω–∞—à—ë–ª –ø–µ—Å–Ω—é –Ω–∞ ${time} ${date}`
        });
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–µ–Ω:", err);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã" });
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –ø–µ—Å–Ω—è –∏ –Ω–µ —Ü–µ–Ω–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI
  const messages = [
    {
      role: "system",
      content: `–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç RuWave 94FM, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –æ–ø—ã—Ç–æ–º –≤ —Ä–∞–¥–∏–æ –∏ —Ä–µ–∫–ª–∞–º–µ. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–¥–∏–æ, —É—Å–ª—É–≥–∞—Ö, –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –º—É–∑—ã–∫–µ. –í—Å—é –Ω—É–∂–Ω—É—é –∏–Ω—Ñ—É –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∑–¥–µ—Å—å https://ruwave.net/. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ. –î–ª–∏–Ω–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º—É–º 160 —Å–∏–º–≤–æ–ª–æ–≤. –¶–µ–Ω—ã: –æ—Ç ‚Ç¨4 –¥–æ ‚Ç¨9.40 / 30 –≤—ã—Ö–æ–¥–æ–≤, —Å–∫–∏–¥–∫–∏ –æ—Ç –±—é–¥–∂–µ—Ç–∞, –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –ø–æ–∑–∏—Ü–∏—é`
    },
    { role: "user", content: userMessage }
  ];

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages,
      max_tokens: 500,
      temperature: 0.7
    });

    const reply = completion.choices?.[0]?.message?.content || "‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç GPT";
    res.json({ reply });
  } catch (err) {
    console.error("OpenAI –æ—à–∏–±–∫–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ GPT", detail: err.message });
  }
});
