const express = require("express");
const cors = require("cors");
const dotenv = require("dotenv");
const OpenAI = require("openai");
const fetch = require("node-fetch");
const csv = require("csv-parser");
const stream = require("stream");
const dayjs = require("dayjs");
const utc = require("dayjs/plugin/utc");
const timezone = require("dayjs/plugin/timezone");
const weekday = require("dayjs/plugin/weekday");
const customParseFormat = require("dayjs/plugin/customParseFormat");
const isSameOrBefore = require("dayjs/plugin/isSameOrBefore");
const isSameOrAfter = require("dayjs/plugin/isSameOrAfter");
dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.extend(weekday);
dayjs.extend(customParseFormat);
dayjs.extend(isSameOrBefore);
dayjs.extend(isSameOrAfter);

dotenv.config();

if (!process.env.OPENAI_API_KEY) {
  console.error("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ");
  process.exit(1);
}

const app = express();
app.use(cors());
app.use(express.json());

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const prices = {
  "30 –≤—ã—Ö–æ–¥–æ–≤": "‚Ç¨9.40",
  "—Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ": "–æ—Ç ‚Ç¨400 –≤ –º–µ—Å—è—Ü",
  "–¥–∂–∏–Ω–≥–ª": "–æ—Ç ‚Ç¨15"
};

async function getPlaylistData() {
  const url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSiFzBycNTlvBeOqX0m0ZpACSeb1MrFSvEv2D3Xhsd0Dqyf_i1hA1_3zInYcV2bGUT2qX6GJdiZXZoK/pub?gid=0&single=true&output=csv";
  const response = await fetch(url);
  const data = await response.text();

  return new Promise((resolve, reject) => {
    const results = [];
    const readable = new stream.Readable();
    readable._read = () => {};
    readable.push(data);
    readable.push(null);

    readable
      .pipe(csv())
      .on("data", (row) => {
        results.push({
          title: row["–ù–∞–∑–≤–∞–Ω–∏–µ"] || row["–ü–µ—Å–Ω—è"],
          date: row["–î–∞—Ç–∞"],
          time: row["–í—Ä–µ–º—è"],
          likes: row["–í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤"],
          dislikes: row["–í—Å–µ–≥–æ –¥–∏–∑–ª–∞–π–∫–æ–≤"]
        });
      })
      .on("end", () => resolve(results))
      .on("error", reject);
  });
}

async function findSongAtTime(userDateTime) {
  const data = await getPlaylistData();
  const target = dayjs(userDateTime, "DD.MM.YYYY HH:mm");

  let closest = null;
  let minDiff = Infinity;

  for (let row of data) {
    const rowTime = dayjs(`${row.date} ${row.time}`, "DD.MM.YYYY HH:mm");
    const diff = Math.abs(target.diff(rowTime));
    if (diff < minDiff) {
      minDiff = diff;
      closest = row;
    }
  }

  if (closest) {
    return `üéµ –í ${closest.time} ${closest.date} –Ω–∞ RuWave –∑–≤—É—á–∞–ª–∞ ‚Äú${closest.title}‚Äù ‚Äî üëç ${closest.likes || 0}, üëé ${closest.dislikes || 0}`;
  } else {
    return "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è.";
  }
}

async function findSongsInRange(fromTime, toTime) {
  const data = await getPlaylistData();
  const results = [];

  for (let row of data) {
    const rowTime = dayjs(`${row.date} ${row.time}`, "DD.MM.YYYY HH:mm");
    if (rowTime.isAfter(fromTime.subtract(1, "minute")) && rowTime.isBefore(toTime.add(1, "minute"))) {
      results.push(`üïí ${row.time} ‚Äî ‚Äú${row.title}‚Äù (üëç ${row.likes || 0}, üëé ${row.dislikes || 0})`);
    }
  }

  if (results.length === 0) return "üòï –í —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –ø–µ—Å–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.";
  return `üé∂ –ü–µ—Å–Ω–∏ –º–µ–∂–¥—É ${fromTime.format("HH:mm")} –∏ ${toTime.format("HH:mm")}:\n` + results.join("\n");
}

function parseDateTimeFromMessage(message) {
  const now = dayjs().tz("Europe/Istanbul");
  const timeMatch = message.match(/(\d{1,2}):(\d{2})/);
  const hour = timeMatch ? parseInt(timeMatch[1]) : now.hour();
  const minute = timeMatch ? parseInt(timeMatch[2]) : now.minute();
  let date = null;

  if (message.includes("—Å–µ–π—á–∞—Å")) date = now;
  else if (message.includes("–≤—á–µ—Ä–∞")) date = now.subtract(1, "day");
  else if (message.includes("–ø–æ–∑–∞–≤—á–µ—Ä–∞")) date = now.subtract(2, "day");
  else if (message.includes("—Å–µ–≥–æ–¥–Ω—è")) date = now;
  else {
    const dateMatch = message.match(/(\d{1,2})\s?(–∏—é–ª—è|–∏—é–Ω—è|–º–∞—è|–∞–ø—Ä–µ–ª—è|–º–∞—Ä—Ç–∞|—Ñ–µ–≤—Ä–∞–ª—è|—è–Ω–≤–∞—Ä—è)/i);
    if (dateMatch) {
      const day = parseInt(dateMatch[1]);
      const monthMap = {
        —è–Ω–≤–∞—Ä—è: 0, —Ñ–µ–≤—Ä–∞–ª—è: 1, –º–∞—Ä—Ç–∞: 2, –∞–ø—Ä–µ–ª—è: 3, –º–∞—è: 4, –∏—é–Ω—è: 5,
        –∏—é–ª—è: 6, –∞–≤–≥—É—Å—Ç–∞: 7, —Å–µ–Ω—Ç—è–±—Ä—è: 8, –æ–∫—Ç—è–±—Ä—è: 9, –Ω–æ—è–±—Ä—è: 10, –¥–µ–∫–∞–±—Ä—è: 11
      };
      const month = monthMap[dateMatch[2].toLowerCase()];
      const year = now.year();
      date = now.set("year", year).set("month", month).set("date", day);
    }
  }

  if (!date) return null;
  return date.set("hour", hour).set("minute", minute).set("second", 0);
}

function parseTimeRangeFromMessage(message) {
  const now = dayjs().tz("Europe/Istanbul");
  let baseDate = now;

  const weekdays = {
    –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: 1, –≤—Ç–æ—Ä–Ω–∏–∫: 2, —Å—Ä–µ–¥–∞: 3,
    —á–µ—Ç–≤–µ—Ä–≥: 4, –ø—è—Ç–Ω–∏—Ü–∞: 5, —Å—É–±–±–æ—Ç–∞: 6, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: 0
  };

  for (const [name, index] of Object.entries(weekdays)) {
    if (message.toLowerCase().includes(name)) {
      const diff = (index - now.day() + 7) % 7;
      baseDate = now.add(diff || 7, "day");
      break;
    }
  }

  if (message.includes("–≤—á–µ—Ä–∞")) baseDate = now.subtract(1, "day");
  if (message.includes("–ø–æ–∑–∞–≤—á–µ—Ä–∞")) baseDate = now.subtract(2, "day");
  if (message.includes("—Å–µ–≥–æ–¥–Ω—è")) baseDate = now;

  if (message.includes("—É—Ç—Ä–æ–º")) baseDate = baseDate.set("hour", 8);
  if (message.includes("–¥–Ω—ë–º")) baseDate = baseDate.set("hour", 13);
  if (message.includes("–≤–µ—á–µ—Ä–æ–º")) baseDate = baseDate.set("hour", 18);
  if (message.includes("–Ω–æ—á—å—é")) baseDate = baseDate.set("hour", 23);

  const rangeMatch = message.match(/(?:–º–µ–∂–¥—É|—Å|–æ—Ç)\s*(\d{1,2})(?::(\d{2}))?\s*(?:–∏|–¥–æ|-)\s*(\d{1,2})(?::(\d{2}))?/i);
  if (!rangeMatch) return null;

  const h1 = parseInt(rangeMatch[1]);
  const m1 = rangeMatch[2] ? parseInt(rangeMatch[2]) : 0;
  const h2 = parseInt(rangeMatch[3]);
  const m2 = rangeMatch[4] ? parseInt(rangeMatch[4]) : 0;

  const from = baseDate.set("hour", h1).set("minute", m1).set("second", 0);
  const to = baseDate.set("hour", h2).set("minute", m2).set("second", 0);

  if (from.isAfter(to)) return null;
  return { from, to };
}

app.post("/chat", async (req, res) => {
  try {
    const userMessage = req.body.message?.trim();
    if (!userMessage) return res.status(400).json({ error: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" });

    // –¶–µ–Ω—ã
    for (let key in prices) {
      if (userMessage.toLowerCase().includes(key)) {
        return res.json({ reply: `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ "${key}": ${prices[key]}` });
      }
    }

    // –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
    const range = parseTimeRangeFromMessage(userMessage);
    if (range) {
      const reply = await findSongsInRange(range.from, range.to);
      return res.json({ reply });
    }

    // –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    const dateTime = parseDateTimeFromMessage(userMessage);
    if (dateTime) {
      const reply = await findSongAtTime(dateTime.format("DD.MM.YYYY HH:mm"));
      return res.json({ reply });
    }

    // GPT-4 –æ—Ç–≤–µ—Ç
    const messages = [
      {
        role: "system",
        content: `–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç RuWave 94FM, –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ –≤ –¢—É—Ä—Ü–∏–∏...`
      },
      { role: "user", content: userMessage }
    ];

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages,
      max_tokens: 500,
      temperature: 0.7
    });

    const reply = completion?.choices?.[0]?.message?.content || "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.";
    res.json({ reply });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /chat:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", detail: err.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ RuWave —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
