const express = require("express");
const cors = require("cors");
const dotenv = require("dotenv");
const fetch = require("node-fetch");
const OpenAI = require("openai");

dotenv.config();

if (!process.env.OPENAI_API_KEY) {
  console.error("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ");
  process.exit(1);
}

const app = express();
app.use(cors());
app.use(express.json());

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
let playlist = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
async function loadPlaylist() {
  try {
    const res = await fetch("https://docs.google.com/spreadsheets/d/e/2PACX-1vSiFzBycNTlvBeOqX0m0ZpACSeb1MrFSvEv2D3Xhsd0Dqyf_i1hA1_3zInYcV2bGUT2qX6GJdiZXZoK/pub?gid=0&single=true&output=csv");
    const text = await res.text();
    const rows = text.trim().split("\n").map(r => r.split(","));

    const headers = rows[0].map(h => h.trim().toLowerCase());
    const dateIdx = headers.findIndex(h => h.includes('date'));
    const timeIdx = headers.findIndex(h => h.includes('time'));
    const songIdx = headers.findIndex(h => h.includes('song'));

    playlist = rows.slice(1).map(row => ({
      date: row[dateIdx]?.trim(),
      time: row[timeIdx]?.trim(),
      song: row[songIdx]?.trim()
    })).filter(r => r.date && r.time && r.song);

    console.log(`‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: ${playlist.length} –∑–∞–ø–∏—Å–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞:", err);
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
loadPlaylist();
setInterval(loadPlaylist, 60 * 60 * 1000);

// üîç –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω –ø–æ –¥–∞—Ç–µ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—É –≤—Ä–µ–º–µ–Ω–∏
function findSongsByDateTime(date, startTime, endTime) {
  const toMinutes = t => {
    const [h, m] = t.split(":").map(Number);
    return h * 60 + m;
  };

  const start = toMinutes(startTime);
  const end = toMinutes(endTime);

  return playlist.filter(entry => {
    if (entry.date !== date) return false;
    const time = toMinutes(entry.time);
    return time >= start && time <= end;
  });
}

// üì° –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞ —Å OpenAI + –ø–æ–∏—Å–∫ –ø–µ—Å–µ–Ω
app.post("/chat", async (req, res) => {
  try {
    const userMessage = req.body.message?.trim();
    if (!userMessage) {
      return res.status(400).json({ error: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" });
    }

    // –°–Ω–∞—á–∞–ª–∞ GPT –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–Ω—è—Ç—å, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –æ –ø–µ—Å–Ω—è—Ö
    const playlistCheck = /—á—Ç–æ –∏–≥—Ä–∞–ª–æ|–∫–∞–∫–∞—è –ø–µ—Å–Ω—è|—á—Ç–æ –∑–∞ –ø–µ—Å–Ω—è|—á—Ç–æ –±—ã–ª–æ/i.test(userMessage);

    if (playlistCheck) {
      const today = new Date();
      const dateString = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;

      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –∏—â–µ–º –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—É 00:00 - 23:59
      const results = findSongsByDateTime(dateString, "00:00", "23:59");

      if (results.length > 0) {
        const list = results.map(r => `${r.time} ‚Äî ${r.song}`).join("\n");
        return res.json({ reply: `üéß –°–µ–≥–æ–¥–Ω—è (${dateString}) –∏–≥—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Å–Ω–∏:\n${list}` });
      } else {
        return res.json({ reply: `üéß –°–µ–≥–æ–¥–Ω—è (${dateString}) –ø–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ.` });
      }
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ –ø–µ—Å–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI
    const messages = [
      {
        role: "system",
        content: `–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç RuWave 94FM, —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ —Ä–∞–¥–∏–æ –≤ –¢—É—Ä—Ü–∏–∏. –¢—ã –∑–Ω–∞–µ—à—å –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã https://docs.google.com/spreadsheets/d/1GAp46OM1pEaUBtBkxgGkGQEg7BUh9NZnXcSFmBkK-HM/edit –∏ –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞–∫–∞—è –ø–µ—Å–Ω—è –∏–≥—Ä–∞–ª–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.`
      },
      {
        role: "user",
        content: userMessage
      }
    ];

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages,
      max_tokens: 500,
      temperature: 0.7
    });

    const reply = completion?.choices?.[0]?.message?.content || "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏.";
    res.json({ reply });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /chat:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", detail: err.message });
  }
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ RuWave —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
