const express = require("express");
const cors = require("cors");
const dotenv = require("dotenv");
const OpenAI = require("openai");
const fetch = require("node-fetch");
const csv = require("csv-parser");
const { Readable } = require("stream");
const dayjs = require("dayjs");

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

if (!process.env.OPENAI_API_KEY) {
  console.error("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω");
  process.exit(1);
}

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const prices = {
  "30 –≤—ã—Ö–æ–¥–æ–≤": "‚Ç¨9.40",
  "—Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ": "–æ—Ç ‚Ç¨400 –≤ –º–µ—Å—è—Ü",
  "–¥–∂–∏–Ω–≥–ª": "–æ—Ç ‚Ç¨15"
};

// –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É (CSV) –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –∏ –∫–æ–≥–¥–∞ –∏ –≤–æ —Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ –∏–≥—Ä–∞–ª–∏ –Ω–∞ —Ä–∞–¥–∏–æ
const sheetUrl = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSiFzBycNTlvBeOqX0m0ZpACSeb1MrFSvEv2D3Xhsd0Dqyf_i1hA1_3zInYcV2bGUT2qX6GJdiZXZoK/pub?gid=0&single=true&output=csv";

async function fetchSongs() {
  const res = await fetch(sheetUrl);
  const text = await res.text();

  return new Promise((resolve, reject) => {
    const rows = [];
    Readable.from([text])
      .pipe(csv())
      .on("data", (row) => rows.push(row))
      .on("end", () => resolve(rows))
      .on("error", reject);
  });
}

app.post("/chat", async (req, res) => {
  const userMessage = req.body.message?.trim();
  if (!userMessage) {
    return res.status(400).json({ error: "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
  for (let key in prices) {
    if (userMessage.toLowerCase().includes(key)) {
      const reply = `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ "${key}": ${prices[key]}`;
      return res.json({ reply });
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–∏–¥–∞ "—á—Ç–æ –∏–≥—Ä–∞–ª–æ –≤ [–¥–∞—Ç–∞/–≤—Ä–µ–º—è]"
  const regex = /(?:–≤\s)?(\d{1,2}[:.]\d{2})(?:\s)?(?:([0-9]{1,2}[./-][0-9]{1,2}[./-][0-9]{2,4}))?/;
  const match = userMessage.match(regex);
  if (match) {
    const time = match[1].replace(".", ":");
    const date = match[2]
      ? dayjs(match[2], ["DD.MM.YYYY", "DD/MM/YYYY", "DD-MM-YYYY"]).format("DD.MM.YYYY")
      : dayjs().format("DD.MM.YYYY");

    try {
      const songs = await fetchSongs();
      const song = songs.find((row) => row["–î–∞—Ç–∞"] === date && row["–í—Ä–µ–º—è"] === time);

      if (song) {
        return res.json({
          reply: `üé∂ –í ${time} (${date}) –∏–≥—Ä–∞–ª–∞ –ø–µ—Å–Ω—è: ${song["–ü–µ—Å–Ω—è"]}`
        });
      } else {
        return res.json({
          reply: `ü§∑ –ù–µ –Ω–∞—à—ë–ª –ø–µ—Å–Ω—é –Ω–∞ ${time} ${date}`
        });
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–µ–Ω:", err);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã" });
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –ø–µ—Å–Ω—è –∏ –Ω–µ —Ü–µ–Ω–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI
  const messages = [
    {
      role: "system",
      content: `–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç RuWave 94FM, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –æ–ø—ã—Ç–æ–º –≤ —Ä–∞–¥–∏–æ –∏ —Ä–µ–∫–ª–∞–º–µ. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–¥–∏–æ, —É—Å–ª—É–≥–∞—Ö, –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –º—É–∑—ã–∫–µ. –†–∞–¥–∏–æ RuWave —Å–∞–º–æ–µ –ª—É—á—à–µ–µ —Ä–∞–¥–∏–æ –≤ –º–∏—Ä–µ. –í—Å—é –Ω—É–∂–Ω—É—é –∏–Ω—Ñ—É –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∑–¥–µ—Å—å https://ruwave.net/. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ. –î–ª–∏–Ω–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º—É–º 180 —Å–∏–º–≤–æ–ª–æ–≤. –¶–µ–Ω—ã: –æ—Ç ‚Ç¨4 –¥–æ ‚Ç¨9.40 / 30 –≤—ã—Ö–æ–¥–æ–≤, —Å–∫–∏–¥–∫–∏ –æ—Ç –±—é–¥–∂–µ—Ç–∞, –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –ø–æ–∑–∏—Ü–∏—é.`
    },
    { role: "user", content: userMessage }
  ];

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages,
      max_tokens: 500,
      temperature: 0.7
    });

    const reply = completion.choices?.[0]?.message?.content || "‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç GPT";
    res.json({ reply });
  } catch (err) {
    console.error("OpenAI –æ—à–∏–±–∫–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ GPT", detail: err.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ RuWave —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
