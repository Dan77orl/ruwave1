const express = require("express");
const cors = require("cors");
const dotenv = require("dotenv");
const fetch = require("node-fetch");
const OpenAI = require("openai");

dotenv.config();

if (!process.env.OPENAI_API_KEY) {
  console.error("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ");
  process.exit(1);
}

const app = express();
app.use(cors());
app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let prices = {};
let playlist = [];

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω –∏–∑ Google Sheets
async function loadPrices() {
  try {
    const res = await fetch(
      "https://docs.google.com/spreadsheets/d/e/2PACX-1vRYscFQEwGmJMM4hxoWEBrYam3JkQMD9FKbKpcwMrgfSdhaducl_FeHNqwPe-Sfn0HSyeQeMnyqvgtN/pub?gid=0&single=true&output=csv"
    );
    const text = await res.text();
    const rows = text.trim().split("\n");

    const newPrices = {};
    for (let row of rows) {
      const [name, price] = row.split(",");
      if (name && price) {
        newPrices[name.trim().toLowerCase()] = price.trim();
      }
    }

    prices = newPrices;
    console.log("‚úÖ –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", prices);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω:", err);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ Google Sheets
async function loadPlaylist() {
  try {
    const res = await fetch(
      "https://docs.google.com/spreadsheets/d/e/2PACX-1vSiFzBycNTlvBeOqX0m0ZpACSeb1MrFSvEv2D3Xhsd0Dqyf_i1hA1_3zInYcV2bGUT2qX6GJdiZXZoK/pub?gid=0&single=true&output=csv"
    );
    const text = await res.text();
    const rows = text.trim().split("\n");
    
    const headers = rows[0].split(",");
    const newPlaylist = [];
    
    for (let i = 1; i < rows.length; i++) {
      const [song, date, time, likes, totalLikes, dislikes, totalDislikes] = rows[i].split(",");
      if (song && date && time) {
        newPlaylist.push({
          song: song.trim(),
          date: date.trim(),
          time: time.trim(),
          likes: likes ? parseInt(likes) : 0,
          totalLikes: totalLikes ? parseInt(totalLikes) : 0,
          dislikes: dislikes ? parseInt(dislikes) : 0,
          totalDislikes: totalDislikes ? parseInt(totalDislikes) : 0,
        });
      }
    }

    playlist = newPlaylist;
    console.log("‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω:", playlist.length, "–ø–µ—Å–µ–Ω");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞:", err);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function parseDateTimeFromMessage(message) {
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  const yesterdayStr = yesterday.toISOString().split("T")[0]; // –§–æ—Ä–º–∞—Ç YYYY-MM-DD

  const timeRangeRegex = /(\d{1,2}):(\d{2})\s*(?:–¥–æ|to|-)\s*(\d{1,2}):(\d{2})/i;
  const exactTimeRegex = /(\d{1,2}):(\d{2})/;
  const dateRegex = /(\d{2})\.(\d{2})\.(\d{4})/;

  let date = yesterdayStr;
  let startTime = null;
  let endTime = null;
  let exactTime = null;

  const dateMatch = message.match(dateRegex);
  if (dateMatch) {
    date = `${dateMatch[3]}-${dateMatch[2]}-${dateMatch[1]}`; // DD.MM.YYYY -> YYYY-MM-DD
  }

  const timeRangeMatch = message.match(timeRangeRegex);
  if (timeRangeMatch) {
    startTime = `${timeRangeMatch[1]}:${timeRangeMatch[2]}`;
    endTime = `${timeRangeMatch[3]}:${timeRangeMatch[4]}`;
  } else {
    const exactTimeMatch = message.match(exactTimeRegex);
    if (exactTimeMatch) {
      exactTime = `${exactTimeMatch[1]}:${exactTimeMatch[2]}`;
    }
  }

  return { date, startTime, endTime, exactTime };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
function findSongsByDateTime(date, startTime, endTime, exactTime) {
  const normalizeTime = (time) => {
    const [hours, minutes] = time.split(":").map(Number);
    return hours * 60 + minutes;
  };

  const filteredSongs = playlist.filter((entry) => {
    if (entry.date !== date) return false;

    if (exactTime) {
      return entry.time === exactTime;
    } else if (startTime && endTime) {
      const entryMinutes = normalizeTime(entry.time);
      const startMinutes = normalizeTime(startTime);
      const endMinutes = normalizeTime(endTime);
      return entryMinutes >= startMinutes && entryMinutes <= endMinutes;
    }
    return false;
  });

  return filteredSongs;
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
loadPrices();
loadPlaylist();
setInterval(loadPrices, 5 * 60 * 1000);
setInterval(loadPlaylist, 5 * 60 * 1000);

app.post("/chat", async (req, res) => {
  try {
    const userMessage = req.body.message?.trim();
    if (!userMessage) {
      console.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞");
      return res.status(400).json({ error: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ —Ü–µ–Ω—É
    let foundKey = null;
    let foundPrice = null;
    for (const key in prices) {
      if (userMessage.toLowerCase().includes(key)) {
        foundKey = key;
        foundPrice = prices[key];
        break;
      }
    }

    if (foundPrice) {
      const reply = `üí∞ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å "${foundKey}": ${foundPrice}`;
      console.log("‚úÖ –û—Ç–≤–µ—Ç –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞:", reply);
      return res.json({ reply });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ –ø–µ—Å–Ω–∏
    if (
      userMessage.toLowerCase().includes("–∫–∞–∫–∞—è –ø–µ—Å–Ω—è") ||
      userMessage.toLowerCase().includes("—á—Ç–æ –∏–≥—Ä–∞–ª–æ") ||
      userMessage.toLowerCase().includes("–ø–ª–µ–π–ª–∏—Å—Ç")
    ) {
      const { date, startTime, endTime, exactTime } = parseDateTimeFromMessage(userMessage);
      const songs = findSongsByDateTime(date, startTime, endTime, exactTime);

      if (songs.length > 0) {
        let reply = "üéµ –í —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Å–Ω–∏:\n";
        songs.forEach((song) => {
          reply += `‚Ä¢ ${song.song} –≤ ${song.time} (–õ–∞–π–∫–æ–≤: ${song.totalLikes}, –î–∏–∑–ª–∞–π–∫–æ–≤: ${song.totalDislikes})\n`;
        });
        console.log("‚úÖ –û—Ç–≤–µ—Ç –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞:", reply);
        return res.json({ reply });
      } else {
        const reply = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.";
        console.log("‚ö†Ô∏è –ü–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:", { date, startTime, endTime, exactTime });
        return res.json({ reply });
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ü–µ–Ω—É –∏–ª–∏ –ø–µ—Å–Ω–∏, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É OpenAI
    const messages = [
      {
        role: "system",
        content: `–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç RuWave 94FM, –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ –≤ –¢—É—Ä—Ü–∏–∏ (–ê–ª–∞–Ω—å—è, –ì–∞–∑–∏–ø–∞—à–∞, –ú–∞–Ω–∞–≤–≥–∞—Ç), –≤–µ—â–∞—é—â–µ–π –Ω–∞ —á–∞—Å—Ç–æ—Ç–µ 94.5 FM –∏ –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ ruwave.net, ruwave.net.tr –∏ myradio24.com/ruwave.

üéôÔ∏è –¢—ã ‚Äî –≥–æ–ª–æ—Å —ç—Ñ–∏—Ä–∞ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –º–æ–∑–≥: —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –≤–µ–¥—É—â–∏–π, –∑–Ω–∞—é—â–∏–π –≤–µ—Å—å –ø–ª–µ–π–ª–∏—Å—Ç –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º, –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä —Å 25-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ —Ä–µ–∫–ª–∞–º–µ.

üéß –¢–í–û–ò –†–ï–°–£–†–°–´:
‚Ä¢ Instagram: @ruwave_alanya
‚Ä¢ Google –¢–∞–±–ª–∏—Ü–∞ —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º: https://docs.google.com/spreadsheets/d/e/2PACX-1vSiFzBycNTlvBeOqX0m0ZpACSeb1MrFSvEv2D3Xhsd0Dqyf_i1hA1_3zInYcV2bGUT2qX6GJdiZXZoK/pub?gid=0&single=true&output=csv

–§–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
2. –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞
3. –í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞
4. –õ–∞–π–∫
5. –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤
6. –î–∏–∑–ª–∞–π–∫
7. –í—Å–µ–≥–æ –¥–∏–∑–ª–∞–π–∫–æ–≤

üß† –¢—ã —É–º–µ–µ—à—å:
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–µ—Å–Ω—è—Ö, –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –∏ —Ä–µ–∫–ª–∞–º–µ
‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ —Ç—É—Ä–µ—Ü–∫–æ–º
‚Ä¢ –ü—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
üî• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ¬´–í 19:25 –Ω–∞ RuWave –∑–≤—É—á–∞–ª–∞ ‚Äú–°–∫–æ–ª—å–∑–∫–∏–π –ø—É—Ç—å‚Äù –æ—Ç –ú—ç—Ä–∏ –ö—Ä—ç–º–±—Ä–∏ ‚Äî –ø–µ—Å–Ω—è —Å–æ–±—Ä–∞–ª–∞ —É–∂–µ 28 –ª–∞–π–∫–æ–≤!¬ª`
      },
      {
        role: "user",
        content: userMessage
      }
    ];

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages,
      max_tokens: 500,
      temperature: 0.7
    });

    const reply = completion?.choices?.[0]?.message?.content || "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏.";
    console.log("‚û°Ô∏è –û—Ç–≤–µ—Ç –æ—Ç OpenAI:", { reply });
    res.json({ reply });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /chat:", {
      message: err.message,
      status: err.status,
      stack: err.stack
    });
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", detail: err.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ RuWave —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
