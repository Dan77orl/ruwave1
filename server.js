const express = require("express");
const cors = require("cors");
const dotenv = require("dotenv");
const fetch = require("node-fetch");
const OpenAI = require("openai");

dotenv.config();

if (!process.env.OPENAI_API_KEY) {
  console.error("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ");
  process.exit(1);
}

const app = express();
app.use(cors());
app.use(express.json());

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// üé∂ –ü–ª–µ–π–ª–∏—Å—Ç
let playlist = [];

// üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã
async function loadPlaylist() {
  try {
    const res = await fetch("https://docs.google.com/spreadsheets/d/e/2PACX-1vSiFzBycNTlvBeOqX0m0ZpACSeb1MrFSvEv2D3Xhsd0Dqyf_i1hA1_3zInYcV2bGUT2qX6GJdiZXZoK/pub?gid=0&single=true&output=csv");
    const text = await res.text();
    const rows = text.trim().split("\n").map(r => r.split(","));

    const headers = rows[0].map(h => h.trim().toLowerCase());
    const dateIdx = headers.findIndex(h => h.includes('date'));
    const timeIdx = headers.findIndex(h => h.includes('timestamp'));
    const songIdx = headers.findIndex(h => h.includes('song'));

    playlist = rows.slice(1).map(row => ({
      date: row[dateIdx]?.trim(),
      time: row[timeIdx]?.trim().slice(0, 5), // —É–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã
      song: row[songIdx]?.trim()
    })).filter(r => r.date && r.time && r.song);

    console.log(`‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: ${playlist.length} –∑–∞–ø–∏—Å–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞:", err);
  }
}

loadPlaylist();
setInterval(loadPlaylist, 60 * 60 * 1000);

// üîç –ü–æ–∏—Å–∫ –ø–µ—Å–µ–Ω –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
function findSongsByDateTime(date, startTime, endTime) {
  const toMinutes = t => {
    const [h, m] = t.split(":").map(Number);
    return h * 60 + (m || 0);
  };

  const start = toMinutes(startTime);
  const end = toMinutes(endTime);

  return playlist.filter(entry => {
    if (entry.date !== date) return false;
    const time = toMinutes(entry.time);
    return time >= start && time <= end;
  });
}

// üß† –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–º–æ—â—å—é GPT
async function parseDateTimeWithGPT(userMessage) {
  const messages = [
    {
      role: "system",
      content: `–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ RuWave. –û–ø—Ä–µ–¥–µ–ª–∏ –¥–∞—Ç—É –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ü—Ä–∞–≤–∏–ª–∞:
- –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "–≤—á–µ—Ä–∞", —É–∫–∞–∂–∏ "dateShift": -1.
- –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "–ø–æ–∑–∞–≤—á–µ—Ä–∞", "dateShift": -2.
- –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "10 –¥–Ω–µ–π –Ω–∞–∑–∞–¥", "dateShift": -10.
- –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –∏—é–ª—è), —É–∫–∞–∂–∏ –µ—ë –≤ –ø–æ–ª–µ "date": "01.07.2025".
- –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Å–µ–≥–æ–¥–Ω—è ("dateShift": 0).
- –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Å—Ç–∞–≤—å —Å "00:00" –¥–æ "23:59".
- –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "–≤ 9 –≤–µ—á–µ—Ä–∞", —ç—Ç–æ —Å "21:00" –¥–æ "21:59".
- –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{"dateShift": -1, "start": "21:00", "end": "21:59"}
–∏–ª–∏
{"date": "–¥–¥.–º–º.–≥–≥–≥–≥", "start": "—á—á:–º–º", "end": "—á—á:–º–º"}.`
    },
    { role: "user", content: userMessage }
  ];

  const completion = await openai.chat.completions.create({
    model: "gpt-4o",
    messages,
    max_tokens: 300,
    temperature: 0.2
  });

  const reply = completion.choices[0].message.content;
  try {
    const json = JSON.parse(reply);
    return json;
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç GPT:", reply);
    return null;
  }
}

// üöÄ –ì–ª–∞–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —á–∞—Ç–∞
app.post("/chat", async (req, res) => {
  try {
    const userMessage = req.body.message?.trim();
    if (!userMessage) {
      return res.status(400).json({ error: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" });
    }

    const playlistCheck = /—á—Ç–æ –∏–≥—Ä–∞–ª–æ|–∫–∞–∫–∞—è –ø–µ—Å–Ω—è|—á—Ç–æ –∑–∞ –ø–µ—Å–Ω—è|—á—Ç–æ –±—ã–ª–æ/i.test(userMessage);

    if (playlistCheck) {
      const dateTime = await parseDateTimeWithGPT(userMessage);

      if (dateTime) {
        let date = dateTime.date;

        if (!date && typeof dateTime.dateShift === 'number') {
          const targetDate = new Date();
          targetDate.setDate(targetDate.getDate() + dateTime.dateShift);
          date = `${targetDate.getDate().toString().padStart(2, '0')}.${(targetDate.getMonth() + 1).toString().padStart(2, '0')}.${targetDate.getFullYear()}`;
        }

        if (!date) {
          return res.json({ reply: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –∏–∑ –∑–∞–ø—Ä–æ—Å–∞." });
        }

        const start = dateTime.start || "00:00";
        const end = dateTime.end || "23:59";

        const results = findSongsByDateTime(date, start, end);

        if (results.length > 0) {
          const list = results.map(r => `${r.song}`).join("\n");
          return res.json({ reply: `üéß –ü–µ—Å–Ω–∏ –∑–∞ ${date} —Å ${start} –¥–æ ${end}:\n${list}` });
        } else {
          return res.json({ reply: `üéß –ó–∞ ${date} —Å ${start} –¥–æ ${end} –ø–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.` });
        }
      } else {
        return res.json({ reply: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞." });
      }
    }

    // GPT –¥–ª—è –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
    const messages = [
      {
        role: "system",
        content: `–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç RuWave 94FM, —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ –≤ –¢—É—Ä—Ü–∏–∏. –¢—ã –∑–Ω–∞–µ—à—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–ª–µ–π–ª–∏—Å—Ç –∏ —Ä–µ–∫–ª–∞–º—É.

–¢—ã —É–º–µ–µ—à—å:
- –û—Ç–≤–µ—á–∞—Ç—å: ¬´–ö–∞–∫–∞—è –ø–µ—Å–Ω—è —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç?¬ª, ¬´–ß—Ç–æ –±—ã–ª–æ –≤—á–µ—Ä–∞ –≤ 22:30?¬ª, ¬´–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ä–µ–∫–ª–∞–º–∞ –Ω–∞ RuWave?¬ª
- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ —Ç—É—Ä–µ—Ü–∫–æ–º.
- –û–±—ä—è—Å–Ω—è—Ç—å –≤—ã–≥–æ–¥—ã —Ä–∞–¥–∏–æ, —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã, –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –¥–∂–∏–Ω–≥–ª—ã.`
      },
      {
        role: "user",
        content: userMessage
      }
    ];

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages,
      max_tokens: 500,
      temperature: 0.7
    });

    const reply = completion?.choices?.[0]?.message?.content || "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏.";
    res.json({ reply });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /chat:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", detail: err.message });
  }
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ RuWave —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
