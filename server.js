const express = require("express");
const cors = require("cors");
const dotenv = require("dotenv");
const OpenAI = require("openai");
const fetch = require("node-fetch");
const csv = require("csv-parser");
const { Readable } = require("stream");

dotenv.config();

if (!process.env.OPENAI_API_KEY) {
  console.error("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ");
  process.exit(1);
}

const app = express();
app.use(cors());
app.use(express.json());

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// üîπ –ü–ª–µ–π–ª–∏—Å—Ç
const PLAYLIST_CSV_URL =
  "https://docs.google.com/spreadsheets/d/e/2PACX-1vSiFzBycNTlvBeOqX0m0ZpACSeb1MrFSvEv2D3Xhsd0Dqyf_i1hA1_3zInYcV2bGUT2qX6GJdiZXZoK/pub?gid=0&single=true&output=csv";

let playlistData = [];

async function loadPlaylist() {
  try {
    const response = await fetch(PLAYLIST_CSV_URL);
    const csvText = await response.text();
    playlistData = [];

    await new Promise((resolve, reject) => {
      Readable.from([csvText])
        .pipe(csv())
        .on("data", (row) => playlistData.push(row))
        .on("end", resolve)
        .on("error", reject);
    });

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–µ—Å–µ–Ω: ${playlistData.length}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:", error.message);
  }
}

function findSongByDateTime(date, time) {
  return playlistData.find(
    (row) =>
      row["–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞"]?.trim() === date &&
      row["–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞"]?.trim().startsWith(time)
  );
}

const prices = {
  "30 –≤—ã—Ö–æ–¥–æ–≤": "‚Ç¨9.40",
  "—Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ": "–æ—Ç ‚Ç¨400 –≤ –º–µ—Å—è—Ü",
  "–¥–∂–∏–Ω–≥–ª": "–æ—Ç ‚Ç¨15"
};

app.post("/chat", async (req, res) => {
  try {
    const userMessage = req.body.message?.trim();
    if (!userMessage) {
      return res.status(400).json({ error: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" });
    }

    // üî∏ –¶–µ–Ω—ã
    for (let key in prices) {
      if (userMessage.toLowerCase().includes(key)) {
        const reply = `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ "${key}": ${prices[key]}`;
        return res.json({ reply });
      }
    }

    // üî∏ –ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const timeMatch = userMessage.match(/\b\d{1,2}:\d{2}(?::\d{2})?\b/);
    if (timeMatch) {
      const time = timeMatch[0];
      const now = new Date();
      const yesterday = new Date(now);
      yesterday.setDate(now.getDate() - 1);
      const dateStr = yesterday.toLocaleDateString("ru-RU").replace(/\//g, ".");

      const found = findSongByDateTime(dateStr, time);
      if (found) {
        const name = found["–ù–∞–∑–≤–∞–Ω–∏–µ"] || found[Object.keys(found)[0]];
        const reply = `üéµ –í ${found["–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞"]} ${found["–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞"]} –∏–≥—Ä–∞–ª–∞ –ø–µ—Å–Ω—è: "${name}".`;
        return res.json({ reply });
      }
    }

    // üî∏ ChatGPT fallback
    const messages = [
      {
        role: "system",
        content: `–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç RuWave 94FM, –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ –≤ –¢—É—Ä—Ü–∏–∏ (–ê–ª–∞–Ω—å—è, –ì–∞–∑–∏–ø–∞—à–∞, –ú–∞–Ω–∞–≤–≥–∞—Ç), –≤–µ—â–∞—é—â–µ–π –Ω–∞ —á–∞—Å—Ç–æ—Ç–µ 94.5 FM –∏ –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ ruwave.net, ruwave.net.tr –∏ myradio24.com/ruwave.

üéôÔ∏è –¢—ã ‚Äî –≥–æ–ª–æ—Å —ç—Ñ–∏—Ä–∞ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –º–æ–∑–≥: —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –≤–µ–¥—É—â–∏–π, –∑–Ω–∞—é—â–∏–π –≤–µ—Å—å –ø–ª–µ–π–ª–∏—Å—Ç –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º, –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä —Å 25-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ —Ä–µ–∫–ª–∞–º–µ (Cannes Lions, Clio, Effie, Red Apple).

üéß –¢–í–û–ò –†–ï–°–£–†–°–´:
‚Ä¢ Instagram: @ruwave_alanya
‚Ä¢ Google –¢–∞–±–ª–∏—Ü–∞ —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º: https://docs.google.com/spreadsheets/d/1GAp46OM1pEaUBtBkxgGkGQEg7BUh9NZnXcSFmBkK-HM/edit
‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –¥–∞—Ç—É, –≤—Ä–µ–º—è, –ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏

üß† –¢—ã —É–º–µ–µ—à—å:
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã: ¬´–ö–∞–∫–∞—è –ø–µ—Å–Ω—è –±—ã–ª–∞ –≤ 9:08?¬ª, ¬´–ß—Ç–æ –∏–≥—Ä–∞–ª–æ –≤—á–µ—Ä–∞ –≤ 22:30?¬ª, ¬´–ß—Ç–æ –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ ‚Äú–≠–∫—Å–ø—Ä–µ—Å—Å –≤ –ø—Ä–æ—à–ª–æ–µ‚Äù?¬ª, ¬´–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ä–µ–∫–ª–∞–º–∞?¬ª
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ —Ç—É—Ä–µ—Ü–∫–æ–º
‚Ä¢ –û–±—ä—è—Å–Ω—è—Ç—å –≤—ã–≥–æ–¥—ã: –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ —Ä–∞–¥–∏–æ, –æ–Ω–ª–∞–π–Ω, –Ω–µ–¥–æ—Ä–æ–≥–∞—è —Ä–µ–∫–ª–∞–º–∞

üî• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ¬´–í 19:25 –∑–≤—É—á–∞–ª–∞ ‚Äú–°–∫–æ–ª—å–∑–∫–∏–π –ø—É—Ç—å‚Äù –æ—Ç –ú—ç—Ä–∏ –ö—Ä—ç–º–±—Ä–∏ ‚Äî 28 –ª–∞–π–∫–æ–≤!¬ª`
      },
      {
        role: "user",
        content: userMessage
      }
    ];

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages,
      max_tokens: 500,
      temperature: 0.7
    });

    const reply =
      completion?.choices?.[0]?.message?.content ||
      "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏.";
    res.json({ reply });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /chat:", {
      message: err.message,
      status: err.status,
      stack: err.stack
    });
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", detail: err.message });
  }
});

// üöÄ –°—Ç–∞—Ä—Ç
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  await loadPlaylist();
  console.log(`‚úÖ RuWave —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
